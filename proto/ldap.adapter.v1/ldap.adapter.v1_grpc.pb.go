// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: ldap.adapter.v1.proto

package ldap_adapter_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LdapAdapterServiceClient is the client API for LdapAdapterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LdapAdapterServiceClient interface {
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
}

type ldapAdapterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLdapAdapterServiceClient(cc grpc.ClientConnInterface) LdapAdapterServiceClient {
	return &ldapAdapterServiceClient{cc}
}

func (c *ldapAdapterServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/ldap.adapter.v1.LdapAdapterService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LdapAdapterServiceServer is the server API for LdapAdapterService service.
// All implementations must embed UnimplementedLdapAdapterServiceServer
// for forward compatibility
type LdapAdapterServiceServer interface {
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	mustEmbedUnimplementedLdapAdapterServiceServer()
}

// UnimplementedLdapAdapterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLdapAdapterServiceServer struct {
}

func (UnimplementedLdapAdapterServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedLdapAdapterServiceServer) mustEmbedUnimplementedLdapAdapterServiceServer() {}

// UnsafeLdapAdapterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LdapAdapterServiceServer will
// result in compilation errors.
type UnsafeLdapAdapterServiceServer interface {
	mustEmbedUnimplementedLdapAdapterServiceServer()
}

func RegisterLdapAdapterServiceServer(s grpc.ServiceRegistrar, srv LdapAdapterServiceServer) {
	s.RegisterService(&LdapAdapterService_ServiceDesc, srv)
}

func _LdapAdapterService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdapAdapterServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldap.adapter.v1.LdapAdapterService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdapAdapterServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LdapAdapterService_ServiceDesc is the grpc.ServiceDesc for LdapAdapterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LdapAdapterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ldap.adapter.v1.LdapAdapterService",
	HandlerType: (*LdapAdapterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _LdapAdapterService_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ldap.adapter.v1.proto",
}
